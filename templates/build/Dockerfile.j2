FROM {{ base_img }}
LABEL maintainer="{{ img_maintainer }}"
LABEL description="{{ img_description }}"
LABEL com.mesoform.baseimage="{{ is_base_image }}"
LABEL com.joyent.autopilotpattern="{{ on_autopilot }}"
LABEL com.mesoform.builddate="{{ date }}"
LABEL com.mesoform.baseimage.ver="{{ base_img }}"
LABEL com.docker.img.ver="{{ img_name }}:{{ img_ver }}"

# Set some environment variables
ENV DOCKER_IMG_VER="{{ img_name }}:{{ img_ver }}"
ENV DNS_DOMAIN={{ dns_domain }}
ENV CONSUL_AGENT={{ consul_as_agent }}
ENV CONSUL_VERSION={{ consul_version }}
ENV CONSUL_CHECKSUM={{ consul_checksum }}

# Set some build arguments
{% if build_args is defined %}
{% for arg in build_args %}
ARG {{ arg }}
{% endfor %}
{% endif %}

# todo: have templates for alpine, debian, centos
# if we're using an install script, like below, this may not be necessary

# ToDo: make this into a script and maybe just
# maybe this is an ONBUILD handler as part of a base image and base images are simply created differently
RUN {{ install_script }}


# Put Consul data on a separate volume to avoid filesystem performance issues
# with Docker image layers. Not necessary on Triton, but...
# ToDo: should be a loop over volumes variable
VOLUME [ "{{ volumes }}" ]

# We don't need to expose these ports in order for other containers on Triton
# to reach this container in the default networking environment, but if we
# leave this here then we get the ports as well-known environment variables
# for purposes of linking.
EXPOSE {% for port in ports %}{{ port }} {% endfor %}

# ToDo: base image on ONBUILD handlers for copying files